const debug = require('debug')
// const toRadixTree = require('to-radix-tree')

const match = patternmatch(process.env.REPORT)

module.exports = report

function report (message) {
  try {
    const { head: [from, to, mid], refs = [], type, meta, data } = message
    const logit = match([from, to, type])

    const { timestamp, stack } = meta
    const _stack = stack.join(',')
    const recipient = to !== '*' ? `=>${to}` : ''
    const _log = debug(`${from} (${_stack})${recipient} ${type.toUpperCase()}`)
    const mark = `[${mid}] ${`${timestamp}`.split('.')[0]}ms`
    const items = [mark]

    // _log(mark)
    if (refs.length) items.push(JSON.stringify(refs))
    items.push((typeof data === 'string') ? [data] : data)
    if (logit) _log(...items)
  } catch (error) {
    console.error(message)
    console.error(error)
    throw error
  }
}

/******************************************************************************
  PATTERN MATCHING LANGUAGE for LOGGING


  
******************************************************************************/
function patternmatch (PATTERNS = '+') {
  const list = `${PATTERNS}`.replace(/\n/g, ',').split(',').map(x => x.trim()).filter(x => x)
  // console['log']('@TODO: fix pattern matching', list)
  // @TODO: fix pattern matching

  // @TODO: add all representative examples to `simulation.js`


  return function query ([from, to, type]) {
    return true
    // if (list.length === 1 &&  list[0] === '+') return true
    
    // console['log']({ from, to, type })
    
    // return false

    // return PATTERNS.some(query => {
    //   const [_head, _type] = query.split('#')
    //   const [_from, _to] = _head.split('@')
    //   if (_from && _to && _type) {
    //     const isFrom = from.startsWith(_from)
    //     const isTo = to.startsWith(_to)
    //     const isType = type === _type
    //     return isFrom && isTo && isType
    //   } else if (_from && _to) {
    //     const isFrom = from.startsWith(_from)
    //     const isTo = to.startsWith(_to)
    //     return isFrom && isTo
    //   } else if (_from && _type) {
    //     const isFrom = from.startsWith(_from)
    //     const isType = type === _type
    //     return isFrom && isType
    //   } else if (_from) {
    //     return from.startsWith(_from)
    //   } else if (_to) {
    //     return to.startsWith(_to)
    //   } else if (_type) {
    //     return type === _type
    //   } else {
    //     return
    //   }
    // })
  }
}