module.exports = compare_root_signatures

async function compare_root_signatures (signatures, sig_object, key) {
  const sig = sig_object.signature // TODO maybe we should also compare indexes in const sig_object = { index: 3, signature: 'wefwfwr'}
  return new Promise((resolve, reject) => {
    signatures.push({ sig, key, resolve, reject })
    if (signatures.length === 3) {
      const [ a, b, c ] = signatures
      if (a.sig === b.sig && b.sig === c.sig) resolve_all(signatures, a.sig)
      else if (a.sig === b.sig && b.sig !== c.sig) reject_all(signatures, { type: 'compare_root_signature_fail', data: c.key }) // one sig is different, that encoder fails (can 2 encoders squeeze out the other? should we rather fail all encoders?)
      else if (a.sig !== b.sig && b.sig === c.sig) reject_all(signatures, { type: 'compare_root_signature_fail', data: a.key })
      else if (a.sig !== b.sig && a.sig === c.sig) reject_all(signatures, { type: 'compare_root_signature_fail', data: b.key })
      else if (a.sig !== b.sig && a.sig !== c.sig) reject_all(signatures, { type: 'compare_root_signature_fail', data: [a.key, b.key, c.key] })
    }
  })
}

function resolve_all (signatures, res) {
  signatures.forEach(entry => entry.resolve(res))
}

function reject_all (signatures, res) {
  signatures.forEach(entry => entry.reject(res))
}