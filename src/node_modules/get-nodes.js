const tree = require('flat-tree')

module.exports = get_nodes

async function get_nodes (feed, index, version) {
  return new Promise(async (resolve, reject) => {
    const all = []
    const v = version * 2

    all.push(index*2, v)
    const roots = tree.fullRoots(v)
    all.push(...roots)
    all.push(...get_proof_nodes(index, roots))

    const sorted = [...new Set(all)].sort((a, b) => a - b < 0 ? -1 : 1)
    const nodes = await Promise.all(sorted.map(index => get_node(index)))
    const info = {index, version, nodes}
    // console.log({nodes})

    resolve([nodes, info])
    
    function get_proof_nodes (index, roots) {
      const all = []
      var i = tree.sibling(index * 2)
      while (true) {
        all.push(i)
        i = tree.parent(i)
        if (roots.includes(i)) break
        i = tree.sibling(i)
      }
      return all
    }

    function get_node (index) {
      return new Promise((resolve, reject) => {
        feed._storage.getNode(index, (err, node) => {
          if (err) reject(err)
          resolve(node)
        })
      })
    }
  
  })
}