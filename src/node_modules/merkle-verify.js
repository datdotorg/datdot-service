const hypercore = require('hypercore')
const RAM = require('random-access-memory')
const ready = require('hypercore-ready')
const hyperswarm = require('hyperswarm')
const replicated = require('hypercore-replicated')
const get_index = require('get-index')
const brotli = require('brotli')
const parse_decompressed = require('parse-decompressed')
const get_signature = require('get-signature')
const get_nodes = require('get-nodes')
const audit = require('audit-hypercore')

module.exports = merkle_verify

async function merkle_verify (data, feedKey) {
  return new Promise(async (resolve, reject) => {
    console.log('merkle verifying')
    const { index, encoded, encoder_id } = data

    const decompressed = await brotli.decompress(encoded)
    const decoded = parse_decompressed(decompressed, encoder_id)
    
    const feed = new hypercore(RAM, feedKey, { valueEncoding: 'utf-8', sparse: true })
    await ready(feed)
    const swarm = hyperswarm()
    swarm.join(feed.discoveryKey,  { announce: false, lookup: true })
    swarm.on('connection', async (socket, info) => {
      socket.pipe(feed.replicate(info.client)).pipe(socket)
      await replicated(feed)
      const chunk = await get_index(feed, index)
      await audit(feed)
      if (chunk === decoded.toString('utf-8')) resolve(true)
    })
  })
}

function get_stored_nodes (feed) {
  for (var i = 0, len = feed.length * 2; i < len; i++) {
    feed._storage.getNode(i, (err, res) => {
      if (res) console.log('NODE', res.index)
      else ('No node found')
    })
  }
}