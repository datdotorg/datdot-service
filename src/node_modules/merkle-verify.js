
const crypto = require('hypercore-crypto')
const tree = require('flat-tree')

module.exports = merkle_verify

function merkle_verify ({feedKey, hash_index, version, signature, nodes}) {
  var next = nodes.find(node => node.index === hash_index)
  const roots = tree.fullRoots(version*2)
  roots.push(version*2)
  while (!roots.includes(next.index)) {
    const sibling_index = tree.sibling(next.index)
    const parent_index = tree.parent(next.index)
    next = hash_pair(nodes, next, sibling_index, parent_index)
  }
  const root_node = nodes.find(node => node.index === next.index)
  if (Buffer.compare(next.hash, root_node.hash)) return 'all hashes up to root not verified'
  if (!verify(nodes, roots, signature, feedKey, version)) return'checksum not verified'
}

function hash_pair (nodes, next, sibling_index, parent_index) {
  const sibling = nodes.find(node => node.index === sibling_index)
  const parent_hash = crypto.parent(next, sibling)
  const parent = {
    index: parent_index,
    hash: parent_hash,
    size: next.size + sibling.size
  }
  return parent
}

function verify (nodes, roots, signature, feedKey, version) {
  for (var i = 0, len = roots.length; i < len; i++) {
    nodes.find(node => { 
      if (node.index === roots[i]) {
        roots[i] = node
      }
    })
  }
  const checksum = crypto.signable(roots, version+1)
  return crypto.verify(checksum, signature, feedKey)
}

