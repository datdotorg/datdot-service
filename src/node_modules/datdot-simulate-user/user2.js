const datdot_logkeeper = require('datdot-vault/logkeeper')
const datdot_chain = require('datdot-chain-sdk')
const datdot_vault = require('datdot-vault')
const feed_store = require('../_datdot-service-helpers/feed-store')
const datdot_service = require('../../../')

/******************************************************************************
  BEHAVIORS
******************************************************************************/
const register_chain_account = require('./behavior/register-chain-account.js')
const author_hypercore = require('./behavior/author-hypercore.js')
const subscribe_to_plan = require('./behavior/hosting-plan.js')
const offer_service = require('./behavior/offer-service.js')
/******************************************************************************
  SIMULATE USER
******************************************************************************/
const [scenario, config, logport] = process.argv.slice(2)

const { bootstrap } = JSON.parse(config)

user(JSON.parse(scenario), JSON.parse(config), logport)

async function user ({name, behavior}, config, logport) {
  behavior = [...new Set(behavior)]
  const log = await datdot_logkeeper(name, logport)
  log({ type: 'init', data:  { name, behavior } })
  captureErrors(log)
  const profile = { name, log, config }
  log({ type: 'user', data:  { text: 'this is', profile: JSON.stringify(profile) } })

  try {

    const chainAPI = await datdot_chain(profile)
    log({ type: 'user', data:  { text: 'chainAPI' } })

    const store = feed_store(vaultAPI)
    log({ type: 'user', data:  { text: 'store' } })

    // const storeAPI = datdot_store()

    const serviceAPI = await datdot_service(profile, { chainAPI, vaultAPI, store })
    log({ type: 'user', data:  { text: 'serviceAPI' } })
    
    for (var i = 0, len = behavior.length; i < len; i++) {
      const behavior_name = behavior[i]
      const profile = { name, log: log.sub(behavior_name), config }
      log({ type: 'user', data:  { text: 'behavior', name, behavior_name } })
      if (behavior_name === 'register_chain_account') {
        await register_chain_account(profile, { chainAPI, vaultAPI })
      } else if (behavior_name === 'author_hypercore') {
        await author_hypercore(profile, { chainAPI, vaultAPI, store })
      } else if (behavior_name === 'subscribe_to_plan') {
        await subscribe_to_plan(profile, { chainAPI, vaultAPI, store })
      } else if (behavior_name === 'offer_service') {
        await offer_service(profile, { serviceAPI, chainAPI, vaultAPI })
      }
    }
  } catch (error) {
    log({ type: 'fail', data: { message: error.message, stack: error.stack } })
  }
}