
module.exports = make_general_feed

async function make_general_feed (data, api) {
  const { store, log } = api

  log({ type: 'make-general-feed', data })

  const {
    swarm_opts: { topic, mode = { server: false, client: true } },
    feedkey, 
    peers: _peers,
  } = data
  const stringtopic = topic.toString('hex')
  const peers =  Object.assign({ peerList: [], onpeer: () => {} }, _peers)
  



    
  const topics = store.topics


  // 1. MAKE SWARM
  const swarm = await store.load('...', { type: 'swarm',
    data: {

    }
  })



  { // GENERAL:
    const subcache_path = ['general']
    const subcache = load_subcache(subcache_path)


    
    const topics = subcache.topics


    // 1. Get or make feed
    if (topics[stringtopic] && topics[stringtopic].feeds[stringkey]) { // get existing feed
      feed = topics[stringtopic].feeds[stringkey].feed 
      log({ type: 'feed-store', data: { text: 'Existing feed', stringkey, stringtopic }})
    } else { // make new feed
      feed = new hypercore(RAM, feedkey, { valueEncoding: 'binary', sparse: true })
      await ready(feed)
      log({ type: 'feed-store', data: { text: 'New feed', stringkey, stringtopic }})
    }
    // 2. Store topic and feed
    if (!topics[stringtopic]) topics[stringtopic] = { feeds: {}, sockets: {} }
    if (!topics[stringtopic].feeds[stringkey]) topics[stringtopic].feeds[stringkey] = { feed }
    // // 3. Make swarm
    // if (!subcache.swarm) {
    //   swarm = new hyperswarm()
    //   subcache.swarm = swarm
    //   log({ type: 'feed-store', data: { text: 'new swarm - general', mode }})
    //   swarm.on('connection', onconnection(swarmID, log))
    // } else swarm = subcache.swarm
    // 4. Join topic (if no discovery yet)
    var discovery = subcache.topics[stringtopic].discovery
    if (!discovery) subcache.topics[stringtopic].discovery = swarm.join(topic, mode)
    log({ type: 'feed-store', data: { text: 'swarm joined', mode }})
    // 5. Add task
    increase_task_count(swarmID)
  }

  log({ type: 'feed-store', data: { text: 'returning feed' }})


}