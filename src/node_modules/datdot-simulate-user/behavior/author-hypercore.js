const hypercore = require('hypercore')
const hyperswarm = require('hyperswarm')

/******************************************************************************
  ROLE: author

    1. make a feed
    2. append some data to it
    3. send the public feedkey to another peer using an online chat

******************************************************************************/

module.exports = author_hypercore

// MAKE FEED and SEED IT

async function author_hypercore (profile, APIS) {
  const { log, config } = profile
  const { chainAPI, vaultAPI, store } = APIS
  const account = await vaultAPI
  const getChatAPI = require('_chat/client')
  const chatAPI = await getChatAPI(profile)
  const datdot_crypto = require('../../datdot-crypto')

  log({ type: 'author', data: { text: `Make a feed and share it` } })
  
  const { feed } = await store.load_feed({
    config: { intercept: false, fresh: true, persist: true },
    swarm_opts: { mode: { server: true, client:false } },
    log
  })
    
  await feed.append(Buffer.from('Hello World!'))
  await feed.append(Buffer.from('Pozdravljen svet!'))
  await feed.append(Buffer.from('你好，世界!'))
  await feed.append(Buffer.from('Hola Mundo!'))
  await feed.append(Buffer.from('สวัสดีชาวโลก!'))
  await feed.append(Buffer.from('Hallo Welt!'))
  await feed.append(Buffer.from('Bonjour le monde!'))
  await feed.append(Buffer.from('Здраво Свете!'))
  await feed.append(Buffer.from('Hai dunia!'))
  await feed.append(Buffer.from('Mhoro nyika!'))
  await feed.append(Buffer.from('Salom Dunyo!'))
  await feed.append(Buffer.from('Halo Dunia!'))
  await feed.append(Buffer.from('Kumusta kalibutan!'))
  await feed.append(Buffer.from('Hei Verden!'))
  await feed.append(Buffer.from('Ahoj svet!'))
  await feed.append(Buffer.from('Hej världen!'))
  await feed.append(Buffer.from('Helló Világ!'))

  const feedkey = feed.key
  const topic = feed.discoveryKey
  // const mode = { server: true, client: false }
  
  var tid
  var counter = 10
  // const bootstrap_nodes = [
  //   { host:'0.0.0.0', port: 10001 },
  //   { host:'0.0.0.0', port: 10002 },
  // ]
  // const swarm = new hyperswarm()
  // // const swarm = new hyperswarm({ bootstrap: bootstrap_nodes })
  // const discovery = swarm.join(topic, mode)
  // // await swarm.flush()
  // log({ type: 'author', data: { text: `Swarm joined` } })
  // retry(discovery, mode, log)
  // swarm.on('connection', (socket, info) => {
  //   log({ type: 'author', data: { text: `onconnection!`, isInitiator: socket.isInitiator }})
  //   clearTimeout(tid)
  //   socket.pipe(feed.replicate(socket.isInitiator)).pipe(socket)
  // })

  const keys = { feedkey, topic }
  setTimeout(() => { // TODO: - figure out why we need to wait
    chatAPI.send(JSON.stringify(keys))
    log({ type: 'author', data: [`Send the keys ${JSON.stringify(keys)}`] })
  }, 3000)

  // async function retry (discovery, mode, log) {
  //   tid = setTimeout(() => {
  //       log({ type: 'feed', data: { text: 'retrying connection' }})
  //       if (counter--) retry(discovery, mode, log)
  //   }, 1000)
  //   await discovery.refresh(mode)
  // }

}


// TODO: when anyone tries to connect to download data from the author, 
//they have to expect that the author doesn't have a task id => see how to deal with this