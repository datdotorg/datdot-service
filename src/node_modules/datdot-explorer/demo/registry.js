const http = require('http')

const [json, regport] = process.argv.slice(2) || ['[]']
const ports = JSON.parse(json) // registered ports
const addresses = ports.map(port => `ws://localhost:${port}`)

const server = http.createServer(registry)
server.listen(regport, function after () {
  console.log(`registry running on http://localhost:${this.address().port}`)
})
const seconds = 30 * 24 * 60 * 60 // 30 days

function registry (request, response) {
  console.log('request:', request.url)
  switch (request.url) {
    case "/peers.json":
      // response.setHeader("Content-Type", "text/html")
      response.setHeader("Content-Type", "application/json")
      response.setHeader('Access-Control-Allow-Origin', '*')
      response.setHeader('Access-Control-Allow-Methods', 'OPTIONS, GET')
      response.setHeader('Access-Control-Max-Age', seconds)
      response.setHeader('Access-Control-Request-Method', '*')
      response.setHeader('Access-Control-Allow-Headers', '*')
      response.writeHead(200)
      response.end(JSON.stringify(addresses))
      break
    default:
      response.setHeader("Content-Type", "application/json")
      response.writeHead(404)
      response.end(JSON.stringify({ error: "404 - not found" }))
      break
  }
}