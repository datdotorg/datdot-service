const i_list = require('datdot-ui-list')
module.exports = make_list
function make_list ({page, option = {}, mode, hidden}, protocol) {
    const {flow = 'ui-dropdown-list', name, role = 'option', array, theme} = option
    let store_selected = []
    let render_list = []
    const check_current_undefined = (args) => args.current === undefined 
    const check_selected_undefined = (args) => args.selected === undefined 
    if (mode === 'single-select') render_list = make_single_select(array) 
    if (mode === 'multiple-select') render_list = make_multiple_select(array) 
    render_list.filter( item => {
        if (item.selected) return store_selected.push(item.text)
    })
    return i_list({flow, name, role, body: render_list, mode, hidden, expanded: !hidden, theme}, protocol(name))

    function make_single_select (args) {
        return args.map((opt, index) => {
            const check_options_current = args.every(check_current_undefined)
            const check_options_selected = args.every(check_selected_undefined)
            const obj = {...opt}
            // console.log('current undefined:', check_options_current);
            // console.log('selected undefined:', check_options_selected);
            // if current and selected are undefined, then find first element to be current and selected, others would be false
            if (check_options_current && check_options_selected && index === 0) {
                obj.current = check_options_current
                obj.selected = check_options_current
            } 
            // if current is true and selected is undefined, then make selected is true, others would be false
            if (opt.current && check_options_selected) {
                obj.current = opt.current
                obj.selected = opt.current
            }
            // if selected is true and current is undefined, then make current is true, others would be false
            if (check_options_current && opt.selected) {
                obj.current = opt.selected
                obj.selected = opt.selected
            }
            // if find current, then content would be shown text in current
            if (obj.current) content = obj.text
            /* 
            if selected is undefined but current is false, 
            or current is undefined but selected is false, 
            content would be replaced 'Select' into as selector tip on button by default
            */
            if (check_options_selected && opt.current === false || check_options_current && opt.selected === false ) content = 'Select'
            return obj
        })
    }

    function make_multiple_select (args) {
        const check_options_selected = args.every(check_selected_undefined)
        return args.map((opt, index) => {
            const obj = {...opt}
            // console.log('selected undefined:', check_options_selected);
            if (check_options_selected) obj.selected = check_options_selected
            obj.selected = opt.selected === undefined ? true : opt.selected 
            return obj
        })
    }
}