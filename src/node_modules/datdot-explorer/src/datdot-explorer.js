const bel = require('bel')
const csjs = require('csjs-inject')
const old = require('_old')
const button = require('datdot-ui-button')

module.exports = datdot_explorer

function datdot_explorer ({ addresses }) {
  let recipients = []
  const reload = button({name: 'reload', body: 'reload'}, protocol('reload'))
  const reply =  button({name: 'reply', body: 'reply'}, protocol('reply'))
  const address_list = addresses.map( (url, index) => bel`
  <li class=${css.info}>
    <span class=${css.id}>${index+1}</span>
    <span class=${css.address}>${url}</span>
  </li>`)
  const info = old(addresses)
  const status_info = bel`<div class=${css.status}></div>`
  status_info.innerHTML += info.status
  const nav = bel`<nav class=${css.actions}>${reload}${reply}</nav>`
  const content = bel`
  <div class=${css.content}>
    <ul class=${css.list}>${address_list}</ul>
  </div>
  `
  const container = bel`<div class="${css.container}">${nav}${content}</div>`
  const app = bel`<div class="${css.wrap}" data-state="debug">${container}</div>`
  setTimeout(() => {app.append(info.logs)}, 2000)
  return app

  function handle_replay () {
    console.log('replay')
  }
  function handle_reload () {
    location = location
  }
  function protocol (name) {
    return send => {
      recipients[name] = send
      return get
    }
  }
  function handle_click (from, to, id) {
    if (from.match('replay')) return handle_replay()
    if (from.match('reload')) return handle_reload()
  }
  function get (message) {
    const {head, type, data, refs, meta} = message
    if (type === 'click') return handle_click(...head)
  }
}

const css = csjs`
:root {
    --b: 0, 0%;
    --r: 100%, 50%;
    --color-white: var(--b), 100%;
    --color-black: var(--b), 0%;
    --color-dark: 223, 13%, 20%;
    --color-deep-black: 222, 18%, 11%;
    --color-blue: 214, var(--r);
    --color-red: 358, 99%, 53%;
    --color-amaranth-pink: 331, 86%, 78%;
    --color-persian-rose: 323, 100%, 56%;
    --color-orange: 35, 100%, 58%;
    --color-deep-saffron: 31, 100%, 56%;
    --color-ultra-red: 348, 96%, 71%;
    --color-flame: 15, 80%, 50%;
    --color-verdigris: 180, 54%, 43%;
    --color-maya-blue: 205, 96%, 72%;
    --color-slate-blue: 248, 56%, 59%;
    --color-blue-jeans: 204, 96%, 61%;
    --color-dodger-blue: 213, 90%, 59%;
    --color-light-green: 127, 86%, 77%;
    --color-lime-green: 127, 100%, 40%;
    --color-slimy-green: 108, 100%, 28%;
    --color-maximum-blue-green: 180, 54%, 51%;
    --color-green: 136, 81%, 34%;
    --color-light-green: 97, 86%, 77%;
    --color-lincoln-green: 97, 100%, 18%;
    --color-yellow: 44, 100%, 55%;
    --color-chrome-yellow: 39, var(--r);
    --color-bright-yellow-crayola: 35, 100%, 58%;
    --color-green-yellow-crayola: 51, 100%, 83%;
    --color-purple: 283, var(--r);
    --color-medium-purple: 269, 100%, 70%;
    --color-grey33: var(--b), 20%;
    --color-grey66: var(--b), 40%;
    --color-grey70: var(--b), 44%;
    --color-grey88: var(--b), 53%;
    --color-greyA2: var(--b), 64%;
    --color-greyC3: var(--b), 76%;
    --color-greyCB: var(--b), 80%;
    --color-greyD8: var(--b), 85%;
    --color-greyD9: var(--b), 85%;
    --color-greyE2: var(--b), 89%;
    --color-greyEB: var(--b), 92%;
    --color-greyED: var(--b), 93%;
    --color-greyEF: var(--b), 94%;
    --color-greyF2: var(--b), 95%;
    --transparent: transparent;
    --define-font: *---------------------------------------------*;
    --snippet-font: Segoe UI Mono, Monospace, Cascadia Mono, Courier New, ui-monospace, Liberation Mono, Menlo, Monaco, Consolas;
    --size12: 1.2rem;
    --size14: 1.4rem;
    --size16: 1.6rem;
    --size18: 1.8rem;
    --size20: 2rem;
    --size22: 2.2rem;
    --size24: 2.4rem;
    --size26: 2.6rem;
    --size28: 2.8rem;
    --size30: 3rem;
    --size32: 3.2rem;
    --size36: 3.6rem;
    --size40: 4rem;
    --weight100: 100;
    --weight300: 300;
    --weight400: 400;
    --weight600: 600;
    --weight800: 800;
    --define-primary: *---------------------------------------------*;
    --primary-color: var(--color-black);
    --primary-bg-color: var(--color-greyF2);
    --primary-font: Arial, sens-serif;
    --primary-size: var(--size16);
    --primary-input-radius: 8px;
    --primary-button-radius: 8px;
}
html {
    font-size: 62.5%;
    height: 100%;
}
*, *:before, *:after {
    box-sizing: border-box;
}
body {
    margin: 0;
    padding: 0;
    -webkit-text-size-adjust:100%;
    font-family: var(--primary-font);
    font-size: var(--primary-size);
    background-color: hsl( var(--primary-bg-color) );
    height: 100%;
    overflow: hidden;
}
ul, li {
  padding: 0;
  margin: 0;
}
.wrap {
    display: grid;
}
nav {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  background-color: hsl(var(--primary-bg-color));
  padding: 4px 10px;
}
.content {
  padding-top: 40px;
  display: grid;
  grid-template-rows: auto;
  grid-template-columns: repeat(auto-fill, minmax(50%, auto));
}
.status {
  color: hsl(var(--color-greyA2));
}
[data-state="view"] {
    height: 100%;
}
[data-state="view"] i-log {
  display: none;
}
[data-state="debug"] {
  grid-template-rows: 55% 45%;
  grid-template-columns: auto;
  height: 100%;
}
[data-state="debug"] i-log {
  width: 100%;
  height: 100%;
}
.container {
  display: grid;
  grid-template-rows: min-content;
  grid-template-columns: 90%;
  justify-content: center;
  align-items: start;
  background-color: var(--color-white);
  height: 100%;
  overflow: hidden auto;
}
.actions {
  display: grid;
  grid-template-rows: 1fr;
  grid-template-columns: repeat(auto-fill, minmax(auto, 100px) );
  grid-column-gap: 10px;
}
.list {
  display: grid;
  grid-row-gap: 6px;
  margin-top: 20px;
}
.info {
  display: grid;
  grid-template-columns: minmax(25px, auto) 1fr;
  grid-column-gap: 10px;
  font-size: var(--size14);
  list-style: none;
}
.id {
  display: inline-grid;
  justify-content: center;
  align-items: center;
  font-size: var(--size12);
  color: hsl(var(--color-dark));
  background-color: hsl(var(--color-greyD8));
  border-radius: 8px;
  padding: 2px 4px;
}
.address {
  display: block;
}
@media (max-width: 768px) {
  [data-state="debug"] {}
  [data-state="debug"] i-log {
      position: inherit;
      width: 100%;
  }
  .container {
      grid-template-rows: 80px auto;
  }
}
`
