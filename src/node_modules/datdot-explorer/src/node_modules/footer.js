const bel = require('bel')
const style_sheet = require('support-style-sheet')
const {i_button, i_link} = require('datdot-ui-button')
const i_dropdown = require('datdot-ui-dropdown')
const message_maker = require('message-maker')
const make_grid = require('make-grid')

module.exports = status_footer

function status_footer (opts, protocol) {
    const {page = '*', flow = 'i-footer', name, theme = {}} = opts
    const make = message_maker(`${name} / ${flow} / ${page}`)
    const recipients = []

    function widget () {
        const send = protocol(get)
        const footer = document.createElement('i-footer')
        const shadow = footer.attachShadow({mode: 'open'})
        send(make({type: 'ready'}))
        style_sheet(shadow, style)
        // const address_list = addresses.map( (url, index) => bel`
        // <li class="info">
        //   <span class="id">${index+1}</span>
        //   <span class="address">${url}</span>
        // </li>`)
        const theme_option = {
            message: {
                size: 'var(--size12)',
            },
            button: {
                padding: '2px 4px',
                border_radius: '0',
            }
        }
        const filter = bel`<input class="filter" type='text' name='filter' placeholder='Filter' aria-label='search filter'>`
        const expanded = i_button(
        {
            name: 'expanded', 
            body: 'Collapsed', 
            role: 'switch',
            theme: {
                props: {
                    ...theme_option.button
                }
            }
        }, footer_protocol('expanded'))

        // option for terminal-selector 
        const terminal_option = 
        {
            page,
            name: 'terminal',
            mode : 'single-select',
            expanded: false,
            options: {
                button: {
                    theme: {
                        props: {
                            border_radius: '0',
                            padding: '2px 4px',
                        }
                    }
                },
                list: {
                    direction: 'up',
                    array: [
                        {
                            text: 'Compact messages'
                        },
                        {
                            text: 'Comfortable messages',
                        }
                    ],
                    theme: {
                        grid: {
                            button: {
                                auto: {
                                    auto_flow: 'column'
                                },
                                justify: 'content-left',
                                gap: '5px'
                            }
                        }
                    }
                }
            },
        }

        const levels_option = 
        {
            page,
            name: 'levels',
            mode : 'single-select',
            expanded: false,
            options: {
                button: {
                    theme: {
                        props: {
                            border_radius: '0',
                            padding: '2px 4px',
                        }
                    }
                },
                list: {
                    direction: 'up',
                    array: [
                        {text: 'Level1', current: true},
                        {text: 'Level2'},
                        {text: 'Level3'},
                        {text: 'Level4'},
                        {text: 'Level5'},
                    ] 
                }
            },
        }
        const terminal_selector = i_dropdown(terminal_option, footer_protocol(terminal_option.name))
        const levels_selector = i_dropdown(levels_option, footer_protocol(levels_option.name))
        const num = bel`<span>0</span>`
        const all_message = bel`<span class="total">All messages: ${num}</span>`
        const actions = bel`<div class="actions">${filter}${levels_selector}${terminal_selector}${expanded}${all_message}</div>`
        const status = bel`<div class="status">There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour</div>`
        shadow.append(actions, status)

        return footer

        // handle events
        function switch_event (from, data) {
            const state = !data
            const text = state ? 'Expanded' : 'Collapsed'
            recipients[from](make({type: 'switched', data: state}))
            recipients[from](make({type: 'changed', data: {text}}))
            send(make({to: from, type: 'triggered', data: {checked: state}}) )
            send(make({to: 'logs-stream', type: 'layout-mode', data: {expanded: state}}))
        }

        function selector_event (from, data) {
            const dropdowns = actions.querySelectorAll('i-dropdown')
            const state = data.expanded
            const type = state ? 'expanded' : 'collapsed'
            const to = `${from} / listbox / ui-list`
            recipients[from]( make({to, type, data: {from, expanded: state}}) )
            dropdowns.forEach( item => {
                const name = item.getAttribute('aria-label')
                const to = `${name} / listbox / ui-list`
                item.style.zIndex = '99'
                if (name !== from) {
                    recipients[name]( make({to, type: 'collapsed', data: {name, expanded: false}}) )
                    item.removeAttribute('style')
                }
            })
        }

        function click_event (from, role, data) {
            if (role === 'switch') return switch_event(from, data)
            if (role === 'listbox') return selector_event(from, data)
        }   
        function footer_protocol (name) {
            return send => {
                recipients[name] = send
                return get
            }
        }
        function get (msg) {
            const {head, type, data} = msg
            const from = head[0].split('/')[0].trim()
            const role = head[0].split(' / ')[1]
            send(msg)
            if (type === 'total-messages') return num.textContent = data
            if (type === 'click') return click_event (from, role, data)
        }
    }
    
    const style = `
        :host(i-footer) {
            --size: var(--size12);
            --color: var(--color-white);
            --bg-color: var(--color-dark);
            display: grid;
            font-size: var(--size);
            color: hsl(var(--color));
            background-color: hsl(var(--bg-color));
            ${make_grid({
                areas: ['actions', 'status']
            })}
            width: 100%;
            max-width: 100%;
        }

        .actions {
            grid-area: actions;
            display: grid;
            ${make_grid({
                rows: 'minmax(0, 30px) auto',
                columns: 'minmax(120px, 300px) 90px minmax(155px, 175px) 100px auto',
                gap: '6px'
            })}
            padding: 6px;
        }
        .total {
            
        }
        .filter {
        }
        .status {
            grid-area: status;
            padding: 0 8px 8px;
        }
    `
    return widget()
}