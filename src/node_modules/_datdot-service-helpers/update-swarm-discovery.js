module.exports = update_swarm_discovery

async function update_swarm_discovery ({ swarm, topic, tasks, log }) {
	return new Promise(async (resolve, reject) => {
		const { 
			author, // { server: true }
			sponsor, // { client: true } 
			encoder2author, // { client: true }
			encoder2attestor, // { server: true }
			attestor2encoder, // { client: true }
			attestor2hoster, // { server: true }
			hoster2author, // { server: true, client: true }
			hoster2attestor, // { client: true }
			hoster2peers, // { server: true }
			perf_attestor 
		} = tasks 

		const any_client_only = sponsor || encoder2author || attestor2encoder || hoster2attestor
		const no_client = !sponsor && !encoder2author && !attestor2encoder && !hoster2attestor
		const any_server_only = author || encoder2attestor || attestor2hoster || hoster2peers
		const no_server = !author && !encoder2attestor && !attestor2hoster && !hoster2peers
		const server_and_client = hoster2author

		console.log({ any_client_only, no_client, any_server_only, no_server, server_and_client, tasks  })


		var mode
		if (server_and_client) mode = { server: true, client: true }
		else if (any_client_only && any_server_only) mode = { server: true, client: true }
		else if (any_client_only && no_server && !server_and_client) mode = { server: false, client: true }
		else if (any_client_only && server_and_client) mode = { server: true, client: true }
		else if (no_client && !server_and_client && any_server_only) mode = { server: true, client: false }


		try {
			log({ type: 'discovery', data: { text: 'Refreshing the swarm discovery mode', topic: topic.toString('hex'), mode }})
			const discovery = swarm.status(topic)
			if (discovery.isServer === mode.server && discovery.isClient === mode.client) return resolve()
			discovery.refresh(mode)
			log({ type: 'discovery', data: { text: 'Refreshed the swarm discovery mode', topic: topic.toString('hex'), mode }})
			// console.log({ discovery: storage.discovery })
			resolve(mode)
		} catch (err) {
			log({ type: 'Error', data: { text: 'Error: in updating swarm discovery mode', err }})
			reject()
		}
	})
}