const hyperswarm = require('hyperswarm')
const hypercore = require('hypercore')
const RAM = require('random-access-memory')
const { finished } = require('stream')

const sub = require('subleveldown')
const HosterStorage = require('_datdot-service-helpers/hoster-storage.js')
const ready = require('_datdot-service-helpers/hypercore-ready')


module.exports = load_feed

async function load_feed (role, swarmAPI, account, feedkey, log) {
    const stringkey = feedkey.toString('hex')
    var feed
    if (account.storages.has(stringkey)) {
        const storage = account.storages.get(stringkey)
        feed = storage.feed
        log({ type: role, data: { text: `Existing feed`, stringkey } })
    } else {
        feed = new hypercore(RAM, feedkey, { valueEncoding: 'binary', sparse: true })
        log({ type: role, data: { text: `New feed`, stringkey } })
        await ready(feed)

        const mode = { server: false, client: true }
        const discovery = swarmAPI.swarm.join(feed.discoveryKey, mode)
        swarmAPI.swarm.on('connection', async (socket) => onconnection(socket))

        const db = sub(account.db, stringkey, { valueEncoding: 'binary' })
        const storage = new HosterStorage({ db, discovery, feed, log })
        account.storages.set(stringkey, storage)
    }
    return feed

    async function onconnection (socket) {
        log({ type: role, data: { text: `onconnection`, role } })
        const stream = feed.replicate(socket.isInitiator)
        socket.pipe(stream).pipe(socket)
        log({ type: role, data: { feedkey: feed.key.toString('hex'), swarmkey: feed.discoveryKey.toString('hex') } })
    
        // finished(stream, (err) => {
        //   if (err) {
        //     console.error('Stream failed.', err);
        //   } else {
        //     console.log('Stream finished, ending socket now')
        //     try { socket.end() }
        //     catch(err) { log({ type: role, data: { text: `Closing socket error`, err } }) }
        //   }
        // })
    }
}
