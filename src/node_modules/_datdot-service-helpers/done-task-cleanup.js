module.exports = done_task_cleanup

async function done_task_cleanup ({ store, topic, cache, log }) {
    return new Promise(async (resolve, reject) => {
        const { swarm, topics, sockets } = cache
        const status = swarm.status(topic)
        
        const stringtopic = topic.toString('hex')
        const topic_remotekeys = Object.keys(topics[stringtopic].sockets)
        log({ type: 'task', data: { text: 'Removing task from cache', count: topics[stringtopic].count }})
        
        if (status && status.isServer) {
            // hoster or author
            // maybe we are connected to more than one peer (because we are a server)
            // to the attestor, but we need to keep at least one set of streams open + feed and discovery open
            for (var i = 0; i < topic_remotekeys - 1; i++) {
                const { socket, channel } = sockets[topic_remotekeys[i]]
                socket ? socket.end() : log({ type: 'task', data: { text: 'Error: no socket' }})
                channel ? channel.close() : log({ type: 'task', data: { text: 'No channel to close' }})
            }
            return resolve()
        } 
        
        topic_remotekeys.forEach(key => {
            
            log({ type: 'task', data: { text: 'socket count for this remotekey', sockets: sockets[key].count }})
            sockets[key].count--
            if (sockets[key].count < 1) {
                // if socket not in use, close it
                const { socket, replicationStream, channel } = sockets[key]
                socket ? socket.end() : log({ type: 'task', data: { text: 'Error: no socket' }})
                channel ? channel.close() : log({ type: 'task', data: { text: 'No channel to close' }})
                replicationStream ? replicationStream.end() : log({ type: 'task', data: { text: 'Error: no replicationStream' }})
                // delete the socket object
                delete cache.sockets[key]
            }
        })

        if (topics[stringtopic].count) { 
            log({ type: 'task', data: { text: 'Removing task for topic', stringtopic, count: topics[stringtopic].count }})
            topics[stringtopic].count--
            if (topics[stringtopic].count < 1) {
                await store.clear_topic_and_feeds({ stringtopic, log })
                log({ type: 'task', data: { text: 'Calling remove_topic' }})
            }
            log({ type: 'task', data: { text: 'Task removed' }})
            resolve()
        } else {
            log({ type: 'task', data: { text: 'Error: Trying to remove a task for a non existing topic', stringtopic }})
            reject()
        }
    })
}