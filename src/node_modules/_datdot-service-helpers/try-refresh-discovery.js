module.exports = try_refresh_discovery

async function try_refresh_discovery ({ swarm, topic, tasks, log }) {
	return new Promise(async (resolve, reject) => {
		tasks = Object.assign({ 
			author: false, // { server: true }
			sponsor: false, // { client: true } 
			encoder2author: false, // { client: true }
			encoder2attestor: false, // { server: true }
			attestor2encoder: false, // { client: true }
			attestor2hoster: false, // { server: true }
			hoster2author: false, // { server: true, client: true }
			hoster2attestor: false, // { client: true }
			hoster2peers: false, // { server: true }
			perf_attestor: false
		}, tasks)

		const { 
			author, sponsor, encoder2author, encoder2attestor, attestor2encoder, attestor2hoster, hoster2author, hoster2attestor, hoster2peers, perf_attestor
		} = tasks 
		
		const any_client_only = sponsor || encoder2author || attestor2encoder || hoster2attestor 
		const no_client = !sponsor && !encoder2author && !attestor2encoder && !hoster2attestor
		const any_server_only = author || encoder2attestor || attestor2hoster || hoster2peers
		const no_server = !author && !encoder2attestor && !attestor2hoster && !hoster2peers
		const server_and_client = hoster2author
		
		var mode
		if (server_and_client) mode = { server: true, client: true }
		else if (any_client_only && any_server_only) mode = { server: true, client: true }
		else if (any_client_only && no_server) mode = { server: false, client: true }
		else if (no_client && any_server_only) mode = { server: true, client: false }
		
		try {
			const discovery = swarm.status(topic)
			log({ type: 'swarm', data: { modeee: mode, s: discovery.isServer, c: discovery.isClient, tasks, any_client_only,no_client, any_server_only, no_server, server_and_client } })
			if (discovery.isServer === mode.server && discovery.isClient === mode.client) return resolve(mode)
			discovery.refresh(mode)
			log({ type: 'swarm', data: { text: 'refresh discovery', topic: topic.toString('hex'), mode }})
			// console.log({ discovery: storage.discovery })
			resolve(mode)
		} catch (err) {
			log({ type: 'Error', data: { text: 'Error: in updating swarm discovery mode', err }})
			reject()
		}
	})
}