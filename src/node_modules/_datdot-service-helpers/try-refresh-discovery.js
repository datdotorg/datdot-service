module.exports = try_refresh_discovery

async function try_refresh_discovery ({ swarm, topic, tasks, log }) {
	return new Promise(async (resolve, reject) => {
		tasks = Object.assign({ 
			author: false, // { server: true }
			sponsor: false, // { client: true } 
			encoder2author: false, // { client: true }
			encoder2attester: false, // { server: true }
			attester2encoder: false, // { client: true }
			attester2hoster: false, // { server: true }
			hoster2author: false, // { server: true, client: true }
			hoster2attester: false, // { client: true }
			hoster: false, // { server: true }
			performance_attester: false, // { client: true }
			storage_attester: false, // { client: true }
			storage_hoster: false // { server: true }
		}, tasks)

		const { 
			author, sponsor, encoder2author, encoder2attester, attester2encoder, attester2hoster, hoster2author, hoster2attester, hoster, performance_attester, storage_attester, storage_hoster
		} = tasks 
		
		const any_client_only = sponsor || encoder2author || attester2encoder || hoster2attester || performance_attester || storage_attester
		const no_client = !sponsor && !encoder2author && !attester2encoder && !hoster2attester || !performance_attester || !storage_attester
		const any_server_only = author || encoder2attester || attester2hoster || hoster || storage_hoster
		const no_server = !author && !encoder2attester && !attester2hoster && !hoster || !storage_hoster
		const server_and_client = hoster2author
		
		var mode
		if (server_and_client) mode = { server: true, client: true }
		else if (any_client_only && any_server_only) mode = { server: true, client: true }
		else if (any_client_only && no_server) mode = { server: false, client: true }
		else if (no_client && any_server_only) mode = { server: true, client: false }
		
		try {
			const discovery = swarm.status(topic)
			if (discovery.isServer === mode.server && discovery.isClient === mode.client) return resolve(mode)
			await discovery.refresh(mode)
      // or
      // await swarm.leave(topic)
      // await swarm.join(topic, mode).flushed()
			log({ type: 'swarm', data: { text: 'refresh discovery', topic: topic.toString('hex'), /* roles: tasks, */ mode, old_mode: { server: discovery.isServer, client: discovery.isClient } }})
			// console.log({ discovery: storage.discovery })
			resolve(mode)
		} catch (err) {
			log({ type: 'Error', data: { text: 'Error: in updating swarm discovery mode', err }})
			reject()
		}
	})
}