module.exports = try_refresh_discovery

async function try_refresh_discovery ({ swarm, topic, tasks, log }) {
	return new Promise(async (resolve, reject) => {
		tasks = Object.assign({ 
			author: { count: 0 }, // { server: true }
			sponsor: { count: 0 }, // { client: true } 
			encoder2author: { count: 0 }, // { client: true }
			encoder2attester: { count: 0 }, // { server: true }
			attester2encoder: { count: 0 }, // { client: true }
			attester2hoster: { count: 0 }, // { server: true }
			hoster2author: { count: 0 }, // { server: true, client: true }
			hoster2attester: { count: 0 }, // { client: true }
			hoster: { count: 0 }, // { server: true }
			performance_attester: { count: 0 }, // { client: true }
			storage_attester: { count: 0 }, // { client: true }
			storage_hoster: { count: 0 } // { server: true }
		}, tasks)

		const { 
			author, sponsor, encoder2author, encoder2attester, attester2encoder, attester2hoster, hoster2author, hoster2attester, hoster, performance_attester, storage_attester, storage_hoster
		} = tasks 
		
		const any_client_only = sponsor.count || encoder2author.count || attester2encoder.count || hoster2attester.count || performance_attester.count || storage_attester.count
		const no_client = !sponsor.count && !encoder2author.count && !attester2encoder.count && !hoster2attester.count || !performance_attester.count || !storage_attester.count
		const any_server_only = author.count || encoder2attester.count || attester2hoster.count || hoster.count || storage_hoster.count
		const no_server = !author.count && !encoder2attester.count && !attester2hoster.count && !hoster.count|| !storage_hoster.count
		const server_and_client = hoster2author.count
		
		var mode
		if (server_and_client) mode = { server: true, client: true }
		else if (any_client_only && any_server_only) mode = { server: true, client: true }
		else if (any_client_only && no_server) mode = { server: false, client: true }
		else if (no_client && any_server_only) mode = { server: true, client: false }
		
		try {
			const discovery = swarm.status(topic)
			if (discovery.isServer === mode.server && discovery.isClient === mode.client) return resolve(mode)
      await swarm.leave(topic)
      await swarm.join(topic, mode).flushed()
			log({ type: 'swarm', data: { text: 'refresh discovery', topic: topic.toString('hex'), /* roles: tasks, */ mode, old_mode: { server: discovery.isServer, client: discovery.isClient } }})
			resolve(mode)
		} catch (err) {
			log({ type: 'Error', data: { text: 'Error: in updating swarm discovery mode', err }})
			reject()
		}
	})
}