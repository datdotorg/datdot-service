const hypercoreCrypto = require("hypercore-crypto")
const sodium = require('sodium-universal')
const derive_seed = require('derive-key')
const { Keyring } = require('@polkadot/api')
const keyring = new Keyring({ type: 'sr25519' })
const { seedKeygen } = require('noise-peer')

module.exports = {
  random_bytes,
  create_signing_keypair,
  create_chain_keypair,
  create_noise_keypair,
  derive_seed,
  verify_signature,
}

function random_bytes (size) { // make sure this is high-entropy master key, eg. from a CSPRNG
  return hypercoreCrypto.randomBytes(size)
}

function create_signing_keypair ({ namespace, seed, name }) {
  const signingPublicKey = Buffer.alloc(sodium.crypto_sign_PUBLICKEYBYTES)
  const signingSecretKey = Buffer.alloc(sodium.crypto_sign_SECRETKEYBYTES)
  const signingSeed = derive_seed(namespace, seed, name)
  sodium.crypto_sign_seed_keypair(signingPublicKey, signingSecretKey, signingSeed)
  return { signingPublicKey, signingSecretKey }
}

function create_chain_keypair ({ namespace, seed, name }) {
  const accountSecret = derive_seed(namespace, seed, name)
  const accountUri = `0x${accountSecret.toString('hex')}`
  return keyring.addFromUri(accountUri)
}

function create_noise_keypair ({ namespace, seed, name }) {
  const noiseSeed = derive_seed(namespace, seed, name)
  return seedKeygen(noiseSeed)
}

function verify_signature (signature, message, signingPublicKey) {
  return sodium.crypto_sign_verify_detached(signature, message, signingPublicKey)
}

// @NOTE:
// check comments in this commit https://github.com/playproject-io/datdot-service/blob/wip/src/vault.js