const proof_codec = require('./proof.js')
const b4a = require('b4a')

module.exports = { decode, encode }

// @NOTE: X === encode(decode(X))

function decode (message, log) {
  try {
    const args = message.args[0]
    var { proof_of_contact, reports } = args
    log({ type: 'codec', data: { text: `DECODING MESSAGE`, args: message.args[0] }  })
    if (proof_of_contact) {
      args.proof_of_contact = Buffer.isBuffer(proof_of_contact) ? proof : b4a.from(proof_of_contact, 'hex')
    }
    for (var i = 0, len = reports.length; i < len; i++) {
      const p = reports[i].p
      args.reports[i].p = proof_codec.to_buffer(p)
      log({ type: 'codec', data: { text: `storage report`, p: args.reports[i].p  } })
    }
    const err = invalidate(args)
    if (err) throw err
    log({ type: 'codec', data: { text: `Returning decoded storage-report: ${Object.keys(message)}` } })
    return message
  } catch (error) {
    throw new Error('invalid data', { cause: error })
  }
}

function encode (data) {
  const err = invalidate(message)
  if (err) throw err
  const chunk = Buffer.from({}, 'hex')
  return chunk
}

function invalidate (args) {
  try {
    const { storageChallengeID, status, proof_of_contact, reports } = args
    if (!storageChallengeID) throw new Error('storageChallengeID missing', args)
    if (!status) throw new Error('proof_of_contact missing', proof_of_contact)
    if (!reports) throw new Error('reports missing', args)
    if (status ==='success' && !proof_of_contact) throw new Error('proof_of_contact missing', args)
    for (const report of reports) {
      const { contractID, p } = report      
      if (!contractID) throw new Error('contractID missing', report)
      if (!p) throw new Error('p missing', report)
    }
    return
  } catch (error) {
    return error
  }

}