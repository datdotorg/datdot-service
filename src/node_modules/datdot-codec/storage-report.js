const varint = require('varint')

module.exports = { decode, encode }

// @NOTE: X === encode(decode(X))

function decode (message) {
  console.log('storage report message', {message})
  try {
    const data = message.args[0]
    // var { reports, storage_challenge_signature, storageChallengeID } = data
    // const { contractID, version, nodes } = reports
    data.storage_challenge_signature = Buffer.from(data.storage_challenge_signature, 'binary')
    for (var i = 0, len = data.reports.length; i < len; i++) {
      data.reports[i].nodes.forEach(node => {
        node.hash = Buffer.from(node.hash, 'hex')
      })
    }
    if (!validate(data)) throw new Error('invalid data')
    return message
  } catch (error) {
    console.log({error})
    throw new Error('invalid data')
  }
}

function encode (data) {
  if (!validate(data)) throw new Error('invalid data')
  // @TODO: turn message into a buffer
  const chunk = Buffer.from({}, 'hex')
  return chunk
}

function validate (data) {
  try {
    // @TODO: verify data contains all keys and values and everything necessary for a `storage-report`
    return true
  } catch (error) {
    console.log({error})
    return false
  }

}