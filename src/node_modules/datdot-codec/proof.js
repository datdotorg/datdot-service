const varint = require('varint')
const b4a = require('b4a')

module.exports = { decode, encode, to_string, to_buffer }

// @NOTE: X === encode(decode(X))

function decode (data) {
  try {
    const message = JSON.parse(data)
    console.log('codec proof decode', message)
    var { type, contractID = undefined, index, encoded_data, encoded_data_signature, nodes } = message
    nodes.forEach(node => node.hash = Buffer.from(node.hash, 'hex'))
    const parsed_message = { 
      type,
      contractID,
      index, 
      encoded_data: Buffer.from(encoded_data, 'hex'),
      encoded_data_signature: Buffer.from(encoded_data_signature, 'hex'),
      nodes
    }
    const invalid = invalidate(parsed_message)
    if (invalid) throw invalid
    return parsed_message
  } catch (error) {
    throw error
  }
}

function encode (message) {
  const invalid = invalidate(message)
  if (invalid) throw invalid
  return JSON.stringify(message)
}

function invalidate (message) {
  try {
    const { type } = message
    if (type !== 'proof') throw new Error('invalid message.type')
    // ...
    // TODO: verify message contains all keys and values and everything necessary for a `proof`
    return
  } catch (error) {
    return error
  }
}

function to_string (p) {
  // turn signature and hashes into a string and stringify proof object
  if (typeof p !== 'object') throw new Error('invalid proof type')
  p. upgrade.signature = p. upgrade.signature.toString('hex')
  p.upgrade.nodes.forEach(node => { node.hash = node.hash.toString('hex') })
  return JSON.stringify(p)
}

function to_buffer (p) {
  if (typeof p !== 'string') throw new Error('invalid proof type')
  p = JSON.parse(p)
  p.upgrade.signature = b4a.from(p.upgrade.signature, 'hex')
  p.upgrade.nodes.forEach(node => { node.hash = b4a.from(node.hash, 'hex') })
  return p
}