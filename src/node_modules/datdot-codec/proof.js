const varint = require('varint')

/*
const codec_proof = require('datdot-codec/proof')
const { encode, decode, validate } = codec_proof


*/

module.exports = { decode, encode }

// @NOTE: X === encode(decode(X))

function decode (chunk) {
  try {
    const json = chunk.toString('binary')
    const message = JSON.parse(json)
    var { type, feedKey, index, encoded, proof, encoder_id, version, nodes, signature } = message
    nodes = nodes.map(node => {
      node.hash = Buffer.from(node.hash, 'hex')
      return node
    })
    const parsed_message = { 
      type,
      feedKey: Buffer.from(feedKey, 'hex'),
      index, 
      encoded: Buffer.from(encoded, 'hex'),
      proof: Buffer.from(proof, 'hex'),
      encoder_id, 
      version, 
      nodes, 
      signature: Buffer.from(signature, 'hex')
    }
    if (!validate(parsed_message)) throw new Error('invalid message')
    return parsed_message  
  } catch (error) {
    console.log({error})
    throw new Error('invalid message')
  }
}

function encode (message) {
  if (!validate(message)) throw new Error('invalid message')
  // @TODO: turn message into a buffer
  const chunk = Buffer.from({}, 'hex')
  return chunk
}

function validate (message) {
  try {
    const { type } = message
    if (type !== 'proof') throw new Error('invalide message.type')
    // ...
    // @TODO: verify message contains all keys and values and everything necessary for a `proof`
    return true
  } catch (error) {
    console.log({error})
    return false
  }

}