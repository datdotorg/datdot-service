const varint = require('varint')
const b4a = require('b4a')

module.exports = { decode, encode, to_string, to_buffer }

// @NOTE: X === encode(decode(X))

function decode (data) {
  try {
    const message = JSON.parse(data)
    console.log('codec proof decode', message)
    var { type, index, encoded_data, signed_data } = message
    const parsed_message = { 
      type,
      index, 
      encoded_data: b4a.from(encoded_data, 'hex'),
      signed_data: b4a.from(signed_data, 'hex'),
    }
    const invalid = invalidate(parsed_message)
    if (invalid) throw invalid
    return parsed_message
  } catch (error) {
    throw error
  }
}

function encode (message) {
  const invalid = invalidate(message)
  if (invalid) throw invalid
  return JSON.stringify(message)
}

function invalidate (message) {
  try {
    const { type, index, encoded_data, signed_data  } = message
    if (type !== 'proof') throw new Error('invalid message.type', message)
    if (index === undefined) throw new Error('missing mesage.index', message)
    if (!encoded_data) throw new Error('missing mesage.encoded_data', message)
    if (!signed_data) throw new Error('missing mesage.signed_data', message)
    return
  } catch (error) {
    return error
  }
}

function to_string (p) {
  // turn signature and hashes into a string and stringify proof object
  if (typeof p !== 'object') throw new Error('invalid proof type')
  p.upgrade.signature = p.upgrade.signature.toString('hex')
  p.upgrade.nodes.forEach(node => { node.hash = node.hash.toString('hex') })
  return JSON.stringify(p)
}

function to_buffer (p) {
  if (typeof p !== 'string') throw new Error('invalid proof type')
  p = JSON.parse(p)
  p.upgrade.signature = b4a.from(p.upgrade.signature, 'hex')
  p.upgrade.nodes.forEach(node => { node.hash = b4a.from(node.hash, 'hex') })
  return p
}