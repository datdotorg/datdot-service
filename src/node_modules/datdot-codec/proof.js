const varint = require('varint')

module.exports = { decode, encode }

// @NOTE: X === encode(decode(X))

function decode (message) {
  try {
    const data = JSON.parse(message)
    var { type, contractID = undefined, index, encoded_data, encoded_data_signature, nodes } = data
    nodes.forEach(node => node.hash = Buffer.from(node.hash, 'hex'))
    const parsed_message = { 
      type,
      contractID,
      index, 
      encoded_data: Buffer.from(encoded_data, 'hex'),
      encoded_data_signature: Buffer.from(encoded_data_signature, 'hex'),
      nodes
    }
    if (!validate(parsed_message)) throw new Error('invalid message')
    return parsed_message
  } catch (error) {
    console.log({error})
    throw new Error('invalid message')
  }
}

function encode (message) {
  if (!validate(message)) throw new Error('invalid message')
  return JSON.stringify(message)
}

function validate (message) {
  try {
    const { type } = message
    if (type !== 'proof') throw new Error('invalid message.type')
    // ...
    // @TODO: verify message contains all keys and values and everything necessary for a `proof`
    return true
  } catch (error) {
    console.log({error})
    return false
  }

}